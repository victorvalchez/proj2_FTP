#!/usr/bin/env python3
import os
import socket
import urllib.parse
import sys
import re


# HOST = "ftp.3700.network"
# PORT = 21
# ADDR = (HOST, PORT)


def read_args():
    if len(sys.argv) == 3:
        operation = sys.argv[1]
        param1 = sys.argv[2]
        args = [operation, param1]
        return args
    elif len(sys.argv) == 4:
        operation = sys.argv[1]
        param1 = sys.argv[2]
        param2 = sys.argv[3]
        args = [operation, param1, param2]
        return args


def get_params(string):
    par1 = string.split(':')[0]
    par2 = string.split(':')[1]
    return par1, par2


def parse_url(url):  # Gotta change to parse the rest
    # mkdir ftp://bob:s3cr3t@ftp.example.com/documents/homeworks-v2
    parts = urllib.parse.urlparse(url)
    netloc = parts.netloc
    splited = netloc.split('@')
    # To get the user and the password
    if ':' in splited[0]:
        user, password = get_params(splited[0])
    else:
        user = None
        password = ''
    # To get the server and the port
    if ':' in splited[1]:
        host, port = get_params(splited[1])
    else:
        host = splited[1]
        port = 21
    path = parts.path
    url_params = [user, password, path, host, port]
    return url_params


def sendFTP(so, msg):
    """Function that sends the message through the socket"""
    msg = bytes(msg, 'utf-8')
    total_sent = 0
    while total_sent < len(msg):
        sent = so.send(msg)
        if sent == 0:
            raise RuntimeError("socket connection broken")
        total_sent = total_sent + sent
    # print(total_sent)


def sendDataChannel(data_channel, path):
    """Function that sends the message through the socket"""
    msg = bytes(path, 'utf-8')
    total_sent = 0
    while total_sent < len(msg):
        sent = data_channel.send(msg)
        if sent == 0:
            raise RuntimeError("socket connection broken")
        total_sent = total_sent + sent
    # print(total_sent)


def receiveFTP(so):
    """Function that receives the message from the server through the socket.
    *Disclaimer: both functions were inspired by the ones showed by the professor in class"""
    end = False
    mes = ''
    while not end:
        mes += so.recv(1024).decode()
        if mes.endswith('\r\n'):
            end = True
    # print(mes)
    return mes


def receiveServer(data_channel):
    end = False
    mes = ''
    while not end:
        mes += data_channel.recv(1024).decode()
        if data_channel.recv(1024).decode() == '':
            end = True
    # print(mes)
    return mes


def login(client):
    # Ask to input the login credentials
    # user = input("[CLIENT] Please enter your Username: ")
    args = read_args()
    operation = args[0]
    param1 = args[1]
    url_params, path, sender = get_correct_url(args, operation, param1)

    if url_params[0] is None:
        raise Exception('Server does ont support anonymous login!')
        # user_cmnd = "USER " + url_params[0] + "\r\n"
        # sendFTP(client, user_cmnd)
        # Print message from FTP
        # print(receiveFTP(client))
    else:
        user_cmnd = "USER " + str(url_params[0]) + "\r\n"
        sendFTP(client, user_cmnd)
        # Print message from FTP
        print(receiveFTP(client))
        # password = input("[CLIENT] Please enter your Password: ")
        password_cmnd = "PASS " + str(url_params[1]) + "\r\n"
        sendFTP(client, password_cmnd)
        # Print message from FTP
        print(receiveFTP(client))


def get_correct_url(args, operation, param1):
    sender = ''
    if operation == 'cp' or operation == 'mv':
        if re.match('^ftp://', param1):
            url_params = parse_url(param1)
            path = args[2]
            sender = 'server'.upper()
            print(url_params, path, sender)
        else:
            params2 = args[2]
            url_params = parse_url(params2)
            path = param1
            sender = 'client'.upper()
            print(url_params, path, sender)
    else:
        url_params = parse_url(param1)
        path = None
        sender = None
    return url_params, path, sender


def set_modes(client):
    type_cmnd = "TYPE I\r\n"
    sendFTP(client, type_cmnd)
    print(receiveFTP(client))

    mode_cmnd = "MODE S\r\n"
    sendFTP(client, mode_cmnd)
    print(receiveFTP(client))

    stru_cmnd = "STRU F\r\n"
    sendFTP(client, stru_cmnd)
    print(receiveFTP(client))


def open_data_channel(client):
    pasv_cmnd = "PASV\r\n"
    sendFTP(client, pasv_cmnd)
    response = receiveFTP(client)
    print(response)
    host_port = response.split('(')[1][:-4].split(',')
    port_list = []
    host = ''
    for i in range(len(host_port)):
        if i < 4:
            host += host_port[i]
            host += '.'
        elif 4 <= i <= 5:
            port_list.append(host_port[i])
    host = host[:-1]
    port = (int(port_list[0]) << 8) + int(port_list[1])

    data_channel = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  # To use TCP connection
    data_channel.connect((str(host), port))

    return data_channel


def close_data_channel(data_channel):
    data_channel.close()


def makeDirectory(client, path: str):
    mkd_cmnd = 'MKD ' + str(path) + '\r\n'
    sendFTP(client, mkd_cmnd)
    print(receiveFTP(client))


def delDirectory(client, path: str):
    rmd_cmdn = 'RMD ' + str(path) + '\r\n'
    sendFTP(client, rmd_cmdn)
    print(receiveFTP(client))


def listDirectories(client, path):
    # Set the correct modes
    set_modes(client)
    if path is None:
        path = '/'
    list_cmnd = 'LIST ' + str(path) + '\r\n'
    data_channel = open_data_channel(client)
    sendFTP(client, list_cmnd)
    print(receiveServer(data_channel))


def copyFileFromLocal(client, server_path, local_path, move):
    # Set the correct modes
    set_modes(client)
    # Create command for FTP sever
    copy_cmnd = 'STOR ' + str(server_path) + '\r\n'
    # Send the data
    data_channel = open_data_channel(client)
    sendDataChannel(data_channel, str(local_path))
    # Send the command
    sendFTP(client, copy_cmnd)
    close_data_channel(data_channel)
    if move:
        os.remove(local_path)
    print(receiveFTP(client))


def copyFileFromServer(client, server_path, local_path, move):
    # Set the correct modes
    set_modes(client)
    # Open the data channel
    data_channel = open_data_channel(client)
    # Create command for FTP sever
    copy_cmnd = 'RETR ' + str(server_path) + '\r\n'
    # Send the command
    sendFTP(client, copy_cmnd)
    # Create the file and write the received data
    with open(local_path, 'w') as file:
        file.write(receiveServer(data_channel))
        file.close()
    close_data_channel(data_channel)
    if move:
        delFile(client, server_path)
    print(receiveFTP(client))


def delFile(client, path):
    del_cmdn = 'DELE ' + str(path) + '\r\n'
    sendFTP(client, del_cmdn)
    print(receiveFTP(client))


# FOR MOVE DELETE FROM THE OTHER PLACE
def main():
    # Connect the control socket
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  # To use TCP connection
    args = read_args()
    operation = args[0]
    param1 = args[1]
    url_params, path, sender = get_correct_url(args, operation, param1)
    ADDR = (url_params[3], url_params[4])
    client.connect(ADDR)
    # Receive welcome message
    print(receiveFTP(client))

    # Connect to server
    login(client)
    if operation == 'ls':
        path = url_params[2]
        listDirectories(client, path)
    elif operation == 'mkdir':
        path = url_params[2]
        makeDirectory(client, path)
    elif operation == 'rmdir':
        path = url_params[2]
        delDirectory(client, path)
    elif operation == 'rm':
        path = url_params[2]
        delFile(client, path)
    elif operation == 'cp' or operation == 'mv':
        if operation == 'mv':
            move = True
        else:
            move = False
        server_path = url_params[2]
        local_path = path
        if sender == 'CLIENT':
            copyFileFromLocal(client, server_path, local_path, move)
        elif sender == 'SERVER':
            copyFileFromServer(client, server_path, local_path, move)

    # End connection
    quit_cmnd = 'QUIT\r\n'
    sendFTP(client, quit_cmnd)
    print(receiveFTP(client))


if __name__ == '__main__':
    main()
